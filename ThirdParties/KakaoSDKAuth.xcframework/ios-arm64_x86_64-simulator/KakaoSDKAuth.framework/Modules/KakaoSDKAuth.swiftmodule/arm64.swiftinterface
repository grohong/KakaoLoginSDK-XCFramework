// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name KakaoSDKAuth
import Alamofire
import AuthenticationServices
import Foundation
@_exported import KakaoSDKAuth
import KakaoSDKCommon
import SafariServices
import Swift
import UIKit
public protocol TokenManagable {
  func setToken(_ token: KakaoSDKAuth.OAuthToken?)
  func getToken() -> KakaoSDKAuth.OAuthToken?
  func deleteToken()
}
@_hasMissingDesignatedInitializers final public class AuthApi {
  public static let shared: KakaoSDKAuth.AuthApi
  public static func isKakaoTalkLoginUrl(_ url: Foundation.URL) -> Swift.Bool
  public static func hasToken() -> Swift.Bool
  final public func authorizeRequest(parameters: [Swift.String : Any]) -> Foundation.URLRequest?
  final public func agt(completion: @escaping (Swift.String?, Swift.Error?) -> Swift.Void)
  final public func token(code: Swift.String, codeVerifier: Swift.String? = nil, redirectUri: Swift.String = KakaoCommon.shared.redirectUri(), completion: @escaping (KakaoSDKAuth.OAuthToken?, Swift.Error?) -> Swift.Void)
  final public func refreshAccessToken(refreshToken: Swift.String? = nil, completion: @escaping (KakaoSDKAuth.OAuthToken?, Swift.Error?) -> Swift.Void)
  @objc deinit
}
public struct OAuthToken : Swift.Codable {
  public let tokenType: Swift.String
  public let accessToken: Swift.String
  public let expiresIn: Foundation.TimeInterval
  public let expiredAt: Foundation.Date
  public let refreshToken: Swift.String
  public let refreshTokenExpiresIn: Foundation.TimeInterval
  public let refreshTokenExpiredAt: Foundation.Date
  public let scope: Swift.String?
  public let scopes: [Swift.String]?
  public init(from decoder: Swift.Decoder) throws
  public init(accessToken: Swift.String, expiresIn: Foundation.TimeInterval? = nil, expiredAt: Foundation.Date? = nil, tokenType: Swift.String, refreshToken: Swift.String, refreshTokenExpiresIn: Foundation.TimeInterval? = nil, refreshTokenExpiredAt: Foundation.Date? = nil, scope: Swift.String?, scopes: [Swift.String]?)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Token : Swift.Codable {
  public let accessToken: Swift.String
  public let expiresIn: Foundation.TimeInterval
  public let tokenType: Swift.String
  public let refreshToken: Swift.String?
  public let refreshTokenExpiresIn: Foundation.TimeInterval?
  public let scope: Swift.String?
  public let scopes: [Swift.String]?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CertOAuthToken : Swift.Codable {
  public let tokenType: Swift.String
  public let accessToken: Swift.String
  public let expiresIn: Foundation.TimeInterval
  public let expiredAt: Foundation.Date
  public let refreshToken: Swift.String
  public let refreshTokenExpiresIn: Foundation.TimeInterval
  public let refreshTokenExpiredAt: Foundation.Date
  public let scope: Swift.String?
  public let scopes: [Swift.String]?
  public let txId: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CertTokenInfo : Swift.Codable {
  public let token: KakaoSDKAuth.OAuthToken
  public let txId: Swift.String
  public init(token: KakaoSDKAuth.OAuthToken, txId: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class AuthRequestRetrier : Alamofire.RequestInterceptor {
  public init()
  public func retry(_ request: Alamofire.Request, for session: Alamofire.Session, dueTo error: Swift.Error, completion: @escaping (Alamofire.RetryResult) -> Swift.Void)
  @objc deinit
}
final public class TokenManager : KakaoSDKAuth.TokenManagable {
  public static let manager: KakaoSDKAuth.TokenManager
  public init()
  final public func setToken(_ token: KakaoSDKAuth.OAuthToken?)
  final public func getToken() -> KakaoSDKAuth.OAuthToken?
  final public func deleteToken()
  @objc deinit
}
public enum Prompt : Swift.String {
  case Login
  case Cert
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class AuthController {
  public static let shared: KakaoSDKAuth.AuthController
  @available(iOS 13.0, *)
  public var presentationContextProvider: Any? {
    get
    set
  }
  public var authenticationSession: Any?
  public var authorizeWithTalkCompletionHandler: ((Foundation.URL) -> Swift.Void)?
  public static func isValidRedirectUri(_ redirectUri: Foundation.URL) -> Swift.Bool
  public var codeVerifier: Swift.String?
  public static let delayForAuthenticationSession: Swift.Double
  public init()
  public func resetCodeVerifier()
  public func authorizeWithTalk(prompts: [KakaoSDKAuth.Prompt]? = nil, state: Swift.String? = nil, channelPublicIds: [Swift.String]? = nil, serviceTerms: [Swift.String]? = nil, completion: @escaping (KakaoSDKAuth.OAuthToken?, Swift.Error?) -> Swift.Void)
  public static func handleOpenUrl(url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any] = [:]) -> Swift.Bool
  public func authorizeWithAuthenticationSession(accountParameters: [Swift.String : Swift.String]? = nil, completion: @escaping (KakaoSDKAuth.OAuthToken?, Swift.Error?) -> Swift.Void)
  public func authorizeWithAuthenticationSession(prompts: [KakaoSDKAuth.Prompt]? = nil, state: Swift.String? = nil, completion: @escaping (KakaoSDKAuth.OAuthToken?, Swift.Error?) -> Swift.Void)
  public func authorizeWithAuthenticationSession(prompts: [KakaoSDKAuth.Prompt]? = nil, state: Swift.String? = nil, channelPublicIds: [Swift.String]? = nil, serviceTerms: [Swift.String]? = nil, completion: @escaping (KakaoSDKAuth.OAuthToken?, Swift.Error?) -> Swift.Void)
  public func authorizeWithAuthenticationSession(scopes: [Swift.String], completion: @escaping (KakaoSDKAuth.OAuthToken?, Swift.Error?) -> Swift.Void)
  @objc deinit
}
extension AuthController {
  public func makeParametersForTalk(prompts: [KakaoSDKAuth.Prompt]? = nil, state: Swift.String? = nil, channelPublicIds: [Swift.String]? = nil, serviceTerms: [Swift.String]? = nil) -> [Swift.String : Any]
  public func makeParameters(prompts: [KakaoSDKAuth.Prompt]? = nil, state: Swift.String? = nil, agtToken: Swift.String? = nil, scopes: [Swift.String]? = nil, channelPublicIds: [Swift.String]? = nil, serviceTerms: [Swift.String]? = nil) -> [Swift.String : Any]
}
extension URL {
  public func oauthResult() -> (code: Swift.String?, error: Swift.Error?, state: Swift.String?)
}
extension AuthController {
  public func certAuthorizeWithTalk(prompts: [KakaoSDKAuth.Prompt]? = nil, state: Swift.String? = nil, channelPublicIds: [Swift.String]? = nil, serviceTerms: [Swift.String]? = nil, completion: @escaping (KakaoSDKAuth.CertTokenInfo?, Swift.Error?) -> Swift.Void)
  public func certAuthorizeWithAuthenticationSession(prompts: [KakaoSDKAuth.Prompt]? = nil, state: Swift.String? = nil, agtToken: Swift.String? = nil, scopes: [Swift.String]? = nil, channelPublicIds: [Swift.String]? = nil, serviceTerms: [Swift.String]? = nil, completion: @escaping (KakaoSDKAuth.CertTokenInfo?, Swift.Error?) -> Swift.Void)
}
extension AuthApi {
  final public func certToken(code: Swift.String, codeVerifier: Swift.String? = nil, redirectUri: Swift.String = KakaoCommon.shared.redirectUri(), completion: @escaping (KakaoSDKAuth.CertTokenInfo?, Swift.Error?) -> Swift.Void)
}
@_hasMissingDesignatedInitializers public class MigrateManager {
  public static func checkSdkVersionForMigration()
  public static func migrateSdk()
  public static func markSdkVersion()
  public static func removePrevSdkAuthInfo()
  @objc deinit
}
public let AUTH: KakaoSDKAuth.Auth
public class Auth {
  public static let retryTokenRefreshCount: Swift.Int
  public static let shared: KakaoSDKAuth.Auth
  public var tokenManager: KakaoSDKAuth.TokenManagable
  public init(tokenManager: KakaoSDKAuth.TokenManagable = TokenManager.manager)
  public func setTokenManager(_ tokenManager: KakaoSDKAuth.TokenManagable = TokenManager.manager)
  public func responseData(_ HTTPMethod: Alamofire.HTTPMethod, _ url: Swift.String, parameters: [Swift.String : Any]? = nil, headers: [Swift.String : Swift.String]? = nil, apiType: KakaoSDKCommon.ApiType, logging: Swift.Bool = true, completion: @escaping (Foundation.HTTPURLResponse?, Foundation.Data?, Swift.Error?) -> Swift.Void)
  public func upload(_ HTTPMethod: Alamofire.HTTPMethod, _ url: Swift.String, images: [UIKit.UIImage?] = [], headers: [Swift.String : Swift.String]? = nil, apiType: KakaoSDKCommon.ApiType, completion: @escaping (Foundation.HTTPURLResponse?, Foundation.Data?, Swift.Error?) -> Swift.Void)
  @objc deinit
}
public class AuthRequestAdapter : Alamofire.RequestInterceptor {
  public init()
  public func adapt(_ urlRequest: Foundation.URLRequest, for session: Alamofire.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  @objc deinit
}
extension KakaoSDKAuth.Prompt : Swift.Equatable {}
extension KakaoSDKAuth.Prompt : Swift.Hashable {}
extension KakaoSDKAuth.Prompt : Swift.RawRepresentable {}
