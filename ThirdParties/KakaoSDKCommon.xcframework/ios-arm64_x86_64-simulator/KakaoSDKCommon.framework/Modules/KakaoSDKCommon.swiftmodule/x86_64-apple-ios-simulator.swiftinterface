// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name KakaoSDKCommon
import Alamofire
import CommonCrypto
import Foundation
import Swift
import UIKit
public class Hosts {
  public static let shared: KakaoSDKCommon.Hosts
  final public let kapi: Swift.String
  final public let dapi: Swift.String
  final public let auth: Swift.String
  final public let kauth: Swift.String
  final public let talkAuth: Swift.String
  final public let channel: Swift.String
  final public let webnavi: Swift.String
  final public let talkLink: Swift.String
  final public let talkLinkVersion: Swift.String
  final public let sharerLink: Swift.String
  public init(kapi: Swift.String = "kapi.kakao.com", dapi: Swift.String = "dapi.kakao.com", auth: Swift.String = "auth.kakao.com", kauth: Swift.String = "kauth.kakao.com", talkAuth: Swift.String = "kakaokompassauth", channel: Swift.String = "pf.kakao.com", webnavi: Swift.String = "kakaonavi-wguide.kakao.com", talkLink: Swift.String = "kakaolink", talkLinkVersion: Swift.String = "kakaotalk-5.9.7", sharerLink: Swift.String = "sharer.kakao.com")
  @objc deinit
}
public enum HostType {
  case Kapi
  case Dapi
  case Auth
  case Kauth
  case TalkAuth
  case Channel
  case Navi
  case WebNavi
  case TalkLink
  case TalkLinkVersion
  case SharerLink
  public var host: Swift.String {
    get
  }
  public static func == (a: KakaoSDKCommon.HostType, b: KakaoSDKCommon.HostType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Paths {
  public static let authAuthorize: Swift.String
  public static let authToken: Swift.String
  public static let authAgt: Swift.String
  public static let authTalk: Swift.String
  public static let kakaoAccountsLogin: Swift.String
  public static let signup: Swift.String
  public static var userMe: Swift.String
  public static let userUpdateProfile: Swift.String
  public static let userAccessTokenInfo: Swift.String
  public static let userLogout: Swift.String
  public static let userUnlink: Swift.String
  public static let userShippingAddress: Swift.String
  public static let userServiceTerms: Swift.String
  public static let userScopes: Swift.String
  public static let userRevokeScopes: Swift.String
  public static let talkProfile: Swift.String
  public static let customMemo: Swift.String
  public static let defaultMemo: Swift.String
  public static let scrapMemo: Swift.String
  public static let channels: Swift.String
  public static let friends: Swift.String
  public static let customMessage: Swift.String
  public static let defaultMessage: Swift.String
  public static let scrapMessage: Swift.String
  public static let isStoryUser: Swift.String
  public static let storyProfile: Swift.String
  public static let storyLinkInfo: Swift.String
  public static let myStory: Swift.String
  public static let myStories: Swift.String
  public static let deleteMyStory: Swift.String
  public static let postNote: Swift.String
  public static let postLink: Swift.String
  public static let postPhoto: Swift.String
  public static let uploadMulti: Swift.String
  public static let channel: Swift.String
  public static let shareDestination: Swift.String
  public static let navigateDestination: Swift.String
  public static let webShareDestination: Swift.String
  public static let webNavigateDestination: Swift.String
  public static let talkLink: Swift.String
  public static let talkLinkVersion: Swift.String
  public static let validateLink: Swift.String
  public static let scrapLink: Swift.String
  public static let defalutLink: Swift.String
  public static let sharerLink: Swift.String
  public static let imageUploadLink: Swift.String
  public static let imageScrapLink: Swift.String
  public static let searchCafe: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Urls {
  public static func compose(_ hostType: KakaoSDKCommon.HostType = .Kapi, path: Swift.String) -> Swift.String
  @objc deinit
}
extension Data {
  public func hexEncodedString() -> Swift.String
}
extension UIApplication {
  public class func getMostTopViewController(base: UIKit.UIViewController? = UIApplication.shared.keyWindow?.rootViewController) -> UIKit.UIViewController?
}
@_hasMissingDesignatedInitializers public class SdkJSONEncoder : Foundation.JSONEncoder {
  public static var `default`: KakaoSDKCommon.SdkJSONEncoder {
    get
  }
  public static var custom: KakaoSDKCommon.SdkJSONEncoder {
    get
  }
  override public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SdkJSONDecoder : Foundation.JSONDecoder {
  public static var `default`: KakaoSDKCommon.SdkJSONDecoder {
    get
  }
  public static var custom: KakaoSDKCommon.SdkJSONDecoder {
    get
  }
  public static var customIso8601Date: KakaoSDKCommon.SdkJSONDecoder {
    get
  }
  public static var customSecondsSince1970: KakaoSDKCommon.SdkJSONDecoder {
    get
  }
  override public init()
  @objc deinit
}
public struct ErrorInfo : Swift.Codable {
  public let code: KakaoSDKCommon.ApiFailureReason
  public let msg: Swift.String
  public let requiredScopes: [Swift.String]?
  public let apiType: Swift.String?
  public let allowedScopes: [Swift.String]?
  public init(code: KakaoSDKCommon.ApiFailureReason, msg: Swift.String, requiredScopes: [Swift.String]?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum LogEvent : Swift.String {
  case v
  case d
  case i
  case w
  case e
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum LogLevel : Swift.Int {
  case v
  case d
  case i
  case w
  case e
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
open class SdkLog {
  public static let shared: KakaoSDKCommon.SdkLog
  final public let maxLogs: Swift.Int
  public var debugLogs: [Swift.String] {
    get
  }
  public var debugLog: Swift.String {
    get
  }
  final public let developLoglevel: KakaoSDKCommon.LogLevel
  final public let releaseLogLevel: KakaoSDKCommon.LogLevel
  public init(developLogLevel: KakaoSDKCommon.LogLevel = LogLevel.d, releaseLogLevel: KakaoSDKCommon.LogLevel = LogLevel.i)
  public func clearLog()
  public class func sourceFileName(filePath: Swift.String) -> Swift.String
  public class func v(_ object: Any, filename: Swift.String = #file, line: Swift.Int = #line, column: Swift.Int = #column, funcName: Swift.String = #function)
  public class func d(_ object: Any, filename: Swift.String = #file, line: Swift.Int = #line, column: Swift.Int = #column, funcName: Swift.String = #function)
  public class func i(_ object: Any, filename: Swift.String = #file, line: Swift.Int = #line, column: Swift.Int = #column, funcName: Swift.String = #function)
  public class func w(_ object: Any, filename: Swift.String = #file, line: Swift.Int = #line, column: Swift.Int = #column, funcName: Swift.String = #function)
  public class func e(_ object: Any, filename: Swift.String = #file, line: Swift.Int = #line, column: Swift.Int = #column, funcName: Swift.String = #function)
  @objc deinit
}
extension Date {
  public func toString() -> Swift.String
  public func toSimpleString() -> Swift.String
}
extension Array where Element == Swift.String {
  public func toJsonString() -> Swift.String?
}
extension Array where Element == Swift.Int64 {
  public func toJsonString() -> Swift.String?
}
@_hasMissingDesignatedInitializers public class SdkUtils {
  public static func castOrThrow<T>(_ resultType: T.Type, _ object: Any) throws -> T
  public static func toJsonString<T>(_ value: T) -> Swift.String? where T : Swift.Encodable
  public static func toJsonObject(_ data: Foundation.Data) -> [Swift.String : Any]?
  public static func makeUrlStringWithParameters(_ url: Swift.String, parameters: [Swift.String : Any]?) -> Swift.String?
  public static func makeUrlWithParameters(_ url: Swift.String, parameters: [Swift.String : Any]?) -> Foundation.URL?
  @objc deinit
}
public class ApiRequestAdapter : Alamofire.RequestInterceptor {
  public init(kaHeader: Swift.String = Constants.kaHeader)
  public func adapt(_ urlRequest: Foundation.URLRequest, for session: Alamofire.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  @objc deinit
}
extension KeyedDecodingContainer {
  public func decode(_ type: [Any].Type, forKey key: Swift.KeyedDecodingContainer<K>.Key) throws -> [Any]
  public func decode(_ type: [Swift.String : Any].Type, forKey key: Swift.KeyedDecodingContainer<K>.Key) throws -> [Swift.String : Any]
  public func decodeIfPresent(_ type: [Any].Type, forKey key: Swift.KeyedDecodingContainer<K>.Key) throws -> [Any]?
  public func decodeIfPresent(_ type: [Swift.String : Any].Type, forKey key: Swift.KeyedDecodingContainer<K>.Key) throws -> [Swift.String : Any]?
}
public struct AuthErrorInfo : Swift.Codable {
  public let error: KakaoSDKCommon.AuthFailureReason
  public let errorDescription: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class Properties {
  public static func saveCodable<T>(key: Swift.String, data: T?) where T : Swift.Decodable, T : Swift.Encodable
  public static func loadCodable<T>(key: Swift.String) -> T? where T : Swift.Decodable, T : Swift.Encodable
  public static func delete(_ key: Swift.String)
  public static func markedSdkVersion() -> Swift.String?
  public static func markSdkVersion()
  @objc deinit
}
extension Dictionary {
  public var queryParameters: Swift.String {
    get
  }
  public var urlQueryItems: [Foundation.URLQueryItem]? {
    get
  }
}
extension Dictionary where Key == Swift.String, Value == Any? {
  public func filterNil() -> [Swift.String : Any]?
}
extension Dictionary where Key == Swift.String {
  public func toJsonString() -> Swift.String?
}
extension Dictionary {
  public mutating func merge(_ dictionary: [Key : Value])
}
extension KeyedEncodingContainer {
  public mutating func encode(_ value: [Swift.String : Any], forKey key: Swift.KeyedEncodingContainer<K>.Key) throws
  public mutating func encode(_ value: [Any], forKey key: Swift.KeyedEncodingContainer<K>.Key) throws
  public mutating func encodeIfPresent(_ value: [Swift.String : Any]?, forKey key: Swift.KeyedEncodingContainer<K>.Key) throws
  public mutating func encodeIfPresent(_ value: [Any]?, forKey key: Swift.KeyedEncodingContainer<K>.Key) throws
}
final public class KakaoCommon {
  public static let shared: KakaoSDKCommon.KakaoCommon
  public init()
  public static func initSDK(appKey: Swift.String, customScheme: Swift.String? = nil, loggingEnable: Swift.Bool = false, hosts: KakaoSDKCommon.Hosts? = nil, approvalType: KakaoSDKCommon.ApprovalType? = nil)
  final public func initialize(appKey: Swift.String, customScheme: Swift.String? = nil, loggingEnable: Swift.Bool = false, hosts: KakaoSDKCommon.Hosts? = nil, approvalType: KakaoSDKCommon.ApprovalType? = nil, sdkType: KakaoSDKCommon.SdkType)
  final public func sdkVersion() -> Swift.String
  final public func isLoggingEnable() -> Swift.Bool
  final public func hosts() -> KakaoSDKCommon.Hosts
  final public func approvalType() -> KakaoSDKCommon.ApprovalType
  final public func sdkType() -> KakaoSDKCommon.SdkType
  final public func scheme() throws -> Swift.String
  @objc deinit
}
extension KakaoCommon {
  final public func appKey() throws -> Swift.String
  final public func kaHeader() -> Swift.String
  final public func redirectUri() -> Swift.String
}
public enum SdkError : Swift.Error {
  case ClientFailed(reason: KakaoSDKCommon.ClientFailureReason, errorMessage: Swift.String?)
  case ApiFailed(reason: KakaoSDKCommon.ApiFailureReason, errorInfo: KakaoSDKCommon.ErrorInfo?)
  case AuthFailed(reason: KakaoSDKCommon.AuthFailureReason, errorInfo: KakaoSDKCommon.AuthErrorInfo?)
}
extension SdkError {
  public init(reason: KakaoSDKCommon.ClientFailureReason = .Unknown, message: Swift.String? = nil)
}
extension SdkError {
  public init?(response: Foundation.HTTPURLResponse, data: Foundation.Data, type: KakaoSDKCommon.ApiType)
  public init?(parameters: [Swift.String : Swift.String])
  public init(scopes: [Swift.String]?)
  public init(apiFailedMessage: Swift.String? = nil)
}
extension SdkError {
  public var isClientFailed: Swift.Bool {
    get
  }
  public var isApiFailed: Swift.Bool {
    get
  }
  public var isAuthFailed: Swift.Bool {
    get
  }
  public func getClientError() -> (reason: KakaoSDKCommon.ClientFailureReason, message: Swift.String?)
  public func getApiError() -> (reason: KakaoSDKCommon.ApiFailureReason, info: KakaoSDKCommon.ErrorInfo?)
  public func getAuthError() -> (reason: KakaoSDKCommon.AuthFailureReason, info: KakaoSDKCommon.AuthErrorInfo?)
  public func isInvalidTokenError() -> Swift.Bool
}
public enum ClientFailureReason {
  case Unknown
  case Cancelled
  case TokenNotFound
  case NotSupported
  case BadParameter
  case MustInitAppKey
  case ExceedKakaoLinkSizeLimit
  case CastingFailed
  public static func == (a: KakaoSDKCommon.ClientFailureReason, b: KakaoSDKCommon.ClientFailureReason) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ApiFailureReason : Swift.Int, Swift.Codable {
  case Unknown
  case Internal
  case BadParameter
  case UnsupportedApi
  case Blocked
  case Permission
  case DeprecatedApi
  case ApiLimitExceed
  case NotSignedUpUser
  case AlreadySignedUpUsercase
  case NotKakaoAccountUser
  case InvalidUserPropertyKey
  case NoSuchApp
  case InvalidAccessToken
  case InsufficientScope
  case RequiredAgeVerification
  case UnderAgeLimit
  case LowerAgeLimit
  case AlreadyAgeAuthorized
  case AgeCheckLimitExceed
  case AgeResultMismatched
  case CIResultMismatched
  case NotTalkUser
  case UserDevicedUnsupported
  case TalkMessageDisabled
  case TalkSendMessageMonthlyLimitExceed
  case TalkSendMessageDailyLimitExceed
  case NotStoryUser
  case StoryImageUploadSizeExceed
  case StoryUploadTimeout
  case StoryInvalidScrapUrl
  case StoryInvalidPostId
  case StoryMaxUploadNumberExceed
  case UnderMaintenance
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension ApiFailureReason {
  public init(from decoder: Swift.Decoder) throws
}
public enum AuthFailureReason : Swift.String, Swift.Codable {
  case Unknown
  case InvalidRequest
  case InvalidClient
  case InvalidScope
  case InvalidGrant
  case Misconfigured
  case Unauthorized
  case AccessDenied
  case ServerError
  case AutoLogin
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension AuthFailureReason {
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class Constants {
  public static let responseType: Swift.String
  public static let kaHeader: Swift.String
  public static func appVersion() -> Swift.String?
  @objc deinit
}
public enum SdkType : Swift.String {
  case Swift
  case RxSwift
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class ApprovalType {
  public static let shared: KakaoSDKCommon.ApprovalType
  public var type: Swift.String?
  public init()
  @objc deinit
}
public enum ApiType {
  case KApi
  case KAuth
  public static func == (a: KakaoSDKCommon.ApiType, b: KakaoSDKCommon.ApiType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class SdkCrypto {
  public static let shared: KakaoSDKCommon.SdkCrypto
  public func encrypt(data: Foundation.Data?) -> Foundation.Data?
  public func decrypt(data: Foundation.Data?) -> Foundation.Data?
  public func encryptForMigration(data: Foundation.Data?) -> Foundation.Data?
  public func encryptForMigration(data: Foundation.Data?, key: Foundation.Data?) -> Foundation.Data?
  public func decryptForMigration(data: Foundation.Data?) -> Foundation.Data?
  public func decryptForMigration(data: Foundation.Data?, key: Foundation.Data?) -> Foundation.Data?
  @objc deinit
}
extension SdkCrypto {
  public func generateCodeVerifier() -> Swift.String?
  public func base64(data: Foundation.Data) -> Swift.String
  public func base64url(data: Foundation.Data) -> Swift.String
  public func sha256(data: Foundation.Data) -> Foundation.Data?
  public func sha256(string: Swift.String) -> Foundation.Data?
}
public let API: KakaoSDKCommon.Api
public enum SessionType {
  case Auth
  case Api
  case AuthApi
  case RxAuthApi
  case PartnerAuthApi
  public static func == (a: KakaoSDKCommon.SessionType, b: KakaoSDKCommon.SessionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class Api {
  public static let shared: KakaoSDKCommon.Api
  final public let encoding: Alamofire.URLEncoding
  public var sessions: [KakaoSDKCommon.SessionType : Alamofire.Session]
  public init()
  @objc deinit
}
extension Api {
  public func addSession(type: KakaoSDKCommon.SessionType, session: Alamofire.Session)
  public func session(_ sessionType: KakaoSDKCommon.SessionType) -> Alamofire.Session
}
extension Api {
  public func getRequestRetryFailedError(error: Alamofire.AFError?) -> KakaoSDKCommon.SdkError?
  public func responseData(_ HTTPMethod: Alamofire.HTTPMethod, _ url: Swift.String, parameters: [Swift.String : Any]? = nil, headers: [Swift.String : Swift.String]? = nil, sessionType: KakaoSDKCommon.SessionType = .AuthApi, apiType: KakaoSDKCommon.ApiType, logging: Swift.Bool = true, completion: @escaping (Foundation.HTTPURLResponse?, Foundation.Data?, Swift.Error?) -> Swift.Void)
  public func upload(_ HTTPMethod: Alamofire.HTTPMethod, _ url: Swift.String, images: [UIKit.UIImage?] = [], parameters: [Swift.String : Any]? = nil, headers: [Swift.String : Swift.String]? = nil, needsAccessToken: Swift.Bool = true, needsKAHeader: Swift.Bool = false, sessionType: KakaoSDKCommon.SessionType = .AuthApi, apiType: KakaoSDKCommon.ApiType, completion: @escaping (Foundation.HTTPURLResponse?, Foundation.Data?, Swift.Error?) -> Swift.Void)
}
extension URL {
  public func params() -> [Swift.String : Any]?
}
extension KakaoSDKCommon.HostType : Swift.Equatable {}
extension KakaoSDKCommon.HostType : Swift.Hashable {}
extension KakaoSDKCommon.LogEvent : Swift.Equatable {}
extension KakaoSDKCommon.LogEvent : Swift.Hashable {}
extension KakaoSDKCommon.LogEvent : Swift.RawRepresentable {}
extension KakaoSDKCommon.LogLevel : Swift.Equatable {}
extension KakaoSDKCommon.LogLevel : Swift.Hashable {}
extension KakaoSDKCommon.LogLevel : Swift.RawRepresentable {}
extension KakaoSDKCommon.ClientFailureReason : Swift.Equatable {}
extension KakaoSDKCommon.ClientFailureReason : Swift.Hashable {}
extension KakaoSDKCommon.ApiFailureReason : Swift.Equatable {}
extension KakaoSDKCommon.ApiFailureReason : Swift.Hashable {}
extension KakaoSDKCommon.ApiFailureReason : Swift.RawRepresentable {}
extension KakaoSDKCommon.AuthFailureReason : Swift.Equatable {}
extension KakaoSDKCommon.AuthFailureReason : Swift.Hashable {}
extension KakaoSDKCommon.AuthFailureReason : Swift.RawRepresentable {}
extension KakaoSDKCommon.SdkType : Swift.Equatable {}
extension KakaoSDKCommon.SdkType : Swift.Hashable {}
extension KakaoSDKCommon.SdkType : Swift.RawRepresentable {}
extension KakaoSDKCommon.ApiType : Swift.Equatable {}
extension KakaoSDKCommon.ApiType : Swift.Hashable {}
extension KakaoSDKCommon.SessionType : Swift.Equatable {}
extension KakaoSDKCommon.SessionType : Swift.Hashable {}
