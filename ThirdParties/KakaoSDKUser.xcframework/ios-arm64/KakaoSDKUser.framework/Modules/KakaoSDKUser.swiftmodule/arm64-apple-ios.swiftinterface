// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name KakaoSDKUser
import Foundation
import KakaoSDKAuth
import KakaoSDKCommon
@_exported import KakaoSDKUser
import Swift
import UIKit
import _Concurrency
public enum ScopeType : Swift.String, Swift.Codable {
  case Privacy
  case Service
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Scope : Swift.Codable {
  public let id: Swift.String
  public let displayName: Swift.String
  public let type: KakaoSDKUser.ScopeType
  public let using: Swift.Bool
  public let delegated: Swift.Bool?
  public let agreed: Swift.Bool
  public let revocable: Swift.Bool?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ScopeInfo : Swift.Codable {
  public let id: Swift.Int64
  public let scopes: [KakaoSDKUser.Scope]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct UserShippingAddresses : Swift.Codable {
  public let userId: Swift.Int64?
  public let needsAgreement: Swift.Bool?
  public let shippingAddresses: [KakaoSDKUser.ShippingAddress]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ShippingAddress : Swift.Codable {
  public enum `Type` : Swift.String, Swift.Codable {
    case Old
    case New
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public let id: Swift.Int64
  public let name: Swift.String?
  public let isDefault: Swift.Bool
  public let updatedAt: Foundation.Date?
  public let type: KakaoSDKUser.ShippingAddress.`Type`?
  public let baseAddress: Swift.String?
  public let detailAddress: Swift.String?
  public let receiverName: Swift.String?
  public let receiverPhoneNumber1: Swift.String?
  public let receiverPhoneNumber2: Swift.String?
  public let zoneNumber: Swift.String?
  public let zipCode: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class UserApi {
  public static let shared: KakaoSDKUser.UserApi
  public static func isKakaoTalkLoginAvailable() -> Swift.Bool
  final public func loginWithKakaoTalk(channelPublicIds: [Swift.String]? = nil, serviceTerms: [Swift.String]? = nil, nonce: Swift.String? = nil, completion: @escaping (KakaoSDKAuth.OAuthToken?, Swift.Error?) -> Swift.Void)
  final public func certLoginWithKakaoTalk(prompts: [KakaoSDKAuth.Prompt]? = nil, state: Swift.String? = nil, channelPublicIds: [Swift.String]? = nil, serviceTerms: [Swift.String]? = nil, nonce: Swift.String? = nil, completion: @escaping (KakaoSDKAuth.CertTokenInfo?, Swift.Error?) -> Swift.Void)
  final public func loginWithKakaoAccount(prompts: [KakaoSDKAuth.Prompt]? = nil, loginHint: Swift.String? = nil, nonce: Swift.String? = nil, completion: @escaping (KakaoSDKAuth.OAuthToken?, Swift.Error?) -> Swift.Void)
  final public func certLoginWithKakaoAccount(prompts: [KakaoSDKAuth.Prompt]? = nil, state: Swift.String? = nil, loginHint: Swift.String? = nil, nonce: Swift.String? = nil, completion: @escaping (KakaoSDKAuth.CertTokenInfo?, Swift.Error?) -> Swift.Void)
  final public func loginWithKakaoAccount(scopes: [Swift.String], nonce: Swift.String? = nil, completion: @escaping (KakaoSDKAuth.OAuthToken?, Swift.Error?) -> Swift.Void)
  final public func loginWithKakaoAccount(prompts: [KakaoSDKAuth.Prompt]? = nil, channelPublicIds: [Swift.String]? = nil, serviceTerms: [Swift.String]? = nil, nonce: Swift.String? = nil, completion: @escaping (KakaoSDKAuth.OAuthToken?, Swift.Error?) -> Swift.Void)
  final public func signup(properties: [Swift.String : Swift.String]? = nil, completion: @escaping (Swift.Int64?, Swift.Error?) -> Swift.Void)
  final public func me(propertyKeys: [Swift.String]? = nil, secureResource: Swift.Bool = true, completion: @escaping (KakaoSDKUser.User?, Swift.Error?) -> Swift.Void)
  final public func updateProfile(properties: [Swift.String : Any], completion: @escaping (Swift.Error?) -> Swift.Void)
  final public func accessTokenInfo(completion: @escaping (KakaoSDKUser.AccessTokenInfo?, Swift.Error?) -> Swift.Void)
  final public func logout(completion: @escaping (Swift.Error?) -> Swift.Void)
  final public func unlink(completion: @escaping (Swift.Error?) -> Swift.Void)
  final public func shippingAddresses(fromUpdatedAt: Swift.Int? = nil, pageSize: Swift.Int? = nil, completion: @escaping (KakaoSDKUser.UserShippingAddresses?, Swift.Error?) -> Swift.Void)
  final public func shippingAddresses(addressId: Swift.Int64, completion: @escaping (KakaoSDKUser.UserShippingAddresses?, Swift.Error?) -> Swift.Void)
  final public func serviceTerms(extra: Swift.String? = nil, completion: @escaping (KakaoSDKUser.UserServiceTerms?, Swift.Error?) -> Swift.Void)
  final public func scopes(scopes: [Swift.String]? = nil, completion: @escaping (KakaoSDKUser.ScopeInfo?, Swift.Error?) -> Swift.Void)
  final public func revokeScopes(scopes: [Swift.String], completion: @escaping (KakaoSDKUser.ScopeInfo?, Swift.Error?) -> Swift.Void)
  @objc deinit
}
public struct User : Swift.Codable {
  public let id: Swift.Int64?
  public let properties: [Swift.String : Swift.String]?
  public let kakaoAccount: KakaoSDKUser.Account?
  public let groupUserToken: Swift.String?
  public let connectedAt: Foundation.Date?
  public let synchedAt: Foundation.Date?
  public let hasSignedUp: Swift.Bool?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum AgeRange : Swift.String, Swift.Codable {
  case Age0_9
  case Age10_14
  case Age15_19
  case Age20_29
  case Age30_39
  case Age40_49
  case Age50_59
  case Age60_69
  case Age70_79
  case Age80_89
  case Age90_Above
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Gender : Swift.String, Swift.Codable {
  case Male
  case Female
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum BirthdayType : Swift.String, Swift.Codable {
  case Solar
  case Lunar
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Account : Swift.Codable {
  public let profileNeedsAgreement: Swift.Bool?
  public let profileNicknameNeedsAgreement: Swift.Bool?
  public let profileImageNeedsAgreement: Swift.Bool?
  public let profile: KakaoSDKUser.Profile?
  public let nameNeedsAgreement: Swift.Bool?
  public let name: Swift.String?
  public let emailNeedsAgreement: Swift.Bool?
  public let isEmailValid: Swift.Bool?
  public let isEmailVerified: Swift.Bool?
  public let email: Swift.String?
  public let ageRangeNeedsAgreement: Swift.Bool?
  public let ageRange: KakaoSDKUser.AgeRange?
  public let birthyearNeedsAgreement: Swift.Bool?
  public let birthyear: Swift.String?
  public let birthdayNeedsAgreement: Swift.Bool?
  public let birthday: Swift.String?
  public let birthdayType: KakaoSDKUser.BirthdayType?
  public let genderNeedsAgreement: Swift.Bool?
  public let gender: KakaoSDKUser.Gender?
  public let phoneNumberNeedsAgreement: Swift.Bool?
  public let phoneNumber: Swift.String?
  public let ciNeedsAgreement: Swift.Bool?
  public let ci: Swift.String?
  public let ciAuthenticatedAt: Foundation.Date?
  public let legalNameNeedsAgreement: Swift.Bool?
  public let legalName: Swift.String?
  public let legalBirthDateNeedsAgreement: Swift.Bool?
  public let legalBirthDate: Swift.String?
  public let legalGenderNeedsAgreement: Swift.Bool?
  public let legalGender: KakaoSDKUser.Gender?
  public let isKoreanNeedsAgreement: Swift.Bool?
  public let isKorean: Swift.Bool?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Profile : Swift.Codable {
  public let nickname: Swift.String?
  public let profileImageUrl: Foundation.URL?
  public let thumbnailImageUrl: Foundation.URL?
  public let isDefaultImage: Swift.Bool?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct UserServiceTerms : Swift.Codable {
  public let userId: Swift.Int64?
  public let allowedServiceTerms: [KakaoSDKUser.ServiceTerms]?
  public let appServiceTerms: [KakaoSDKUser.AppServiceTerms]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ServiceTerms : Swift.Codable {
  public let tag: Swift.String
  public let agreedAt: Foundation.Date
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct AppServiceTerms : Swift.Codable {
  public let tag: Swift.String
  public let createdAt: Foundation.Date
  public let updatedAt: Foundation.Date
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct AccessTokenInfo : Swift.Codable {
  public let appId: Swift.Int64
  public let id: Swift.Int64?
  @available(*, deprecated, message: "대신 expiresIn 을 사용해주세요.")
  public let expiresInMillis: Swift.Int64?
  public let expiresIn: Swift.Int64
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension KakaoSDKUser.ScopeType : Swift.Equatable {}
extension KakaoSDKUser.ScopeType : Swift.Hashable {}
extension KakaoSDKUser.ScopeType : Swift.RawRepresentable {}
extension KakaoSDKUser.ShippingAddress.`Type` : Swift.Equatable {}
extension KakaoSDKUser.ShippingAddress.`Type` : Swift.Hashable {}
extension KakaoSDKUser.ShippingAddress.`Type` : Swift.RawRepresentable {}
extension KakaoSDKUser.AgeRange : Swift.Equatable {}
extension KakaoSDKUser.AgeRange : Swift.Hashable {}
extension KakaoSDKUser.AgeRange : Swift.RawRepresentable {}
extension KakaoSDKUser.Gender : Swift.Equatable {}
extension KakaoSDKUser.Gender : Swift.Hashable {}
extension KakaoSDKUser.Gender : Swift.RawRepresentable {}
extension KakaoSDKUser.BirthdayType : Swift.Equatable {}
extension KakaoSDKUser.BirthdayType : Swift.Hashable {}
extension KakaoSDKUser.BirthdayType : Swift.RawRepresentable {}
